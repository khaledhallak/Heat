list = {'Rectangular','Triangular','Cylinderical',...
'Cone','Tapered Rectangular','Truncated Cone','Define Custom Side View'};
[indx,tf] = listdlg('ListString',list);
L= input("Enter Length of the Fin: ");
N= input("Enter Number of Nodes: ");
deltaX=(L/(N-1));
k= input("Enter the Thermal Conductivity of the Fin: ");
h= input("Enter the Convection HT Coeffecient: ");
Tinf= input("Enter the Surrounding Temperature: ");
Tb=input("Enter the Base Temperature: ");


xl=linspace(0,L);

if (indx==1)
b= input("Enter Thickness of the Fin: ");
w= input("Enter Width of the Fin: ");
Afin=2*(b*L+w*L);
Ab=w*b;
x=(deltaX/2):deltaX:L;
for i=1:(N-1)
An(i)= w.*b;
p(i)=2.*(w+b);
y(i)=b/2;
end
if ((b*h)/k<0.2)&&((w*h)/k<0.2)
  disp('1-D Assumptions are Valid');
else
    disp('1-D Assumptions may be Invalid');
endif
 plot(xl,b/2,xl,-b/2);
title('Fin Side View');
else if (indx==2)
b= input("Enter Thickness of the Fin: ");
w= input("Enter Width of the Fin: ");
Ab=w*b;
theta= atan((-b/2)/L)*180/pi;
hyp=L/cos(theta);
Afin=2*(w*hyp)+b*L^2;
x=(deltaX/2):deltaX:L;
y=((-b/2)/L).*x+b/2;
p=2*((2*y)+w);
An=2.*y*w;
theta=atan((b/2)/L)*(180/pi);
if (((b*h)/k<0.2))&&(((w*h)/k<0.2))
  disp('1-D Assumptions are Valid');
else
    disp('1-D Assumptions may be Invalid');
endif
xl=linspace(0,L);
yl=((-b/2)/L).*xl+b/2;
plot(xl,yl,xl,-yl);
title('Fin Side View');
else if (indx==3)
r=input('Input Base Radius: ');
Afin=pi*2*r*L;
Ab=pi*r^2;
x=(deltaX/2):deltaX:L;
  for i=1:N-1
  p(i)=pi.*r.*2;
  An(i)=pi.*r.^2;
  y(i)=r;
end
 if ((r*h)/k<0.2)
  disp('1-D Assumptions are Valid');
else
    disp('1-D Assumptions may be Invalid');
endif
plot(xl,r/2,xl,-r/2);
title('Fin Side View');
else if  (indx==4)
r=input('Input Base Radius: ');
Afin=pi*r*sqrt(L^2+r^2);
Ab=pi*r^2;
x=(deltaX/2):deltaX:L;
y=((-r/2)/L).*x+r/2;
p=pi.*y.*2;
xl=linspace(0,L);
yl=((-r/2)/L).*xl+r/2;
if ((r*h)/k<0.2)
  disp('1-D Assumptions are Valid');
else
    disp('1-D Assumptions may be Invalid');
endif
An=pi.*y.^2;
theta=atan((r(1)/2)/L)*(180/pi);
plot(xl,yl,xl,-yl);
title('Fin Side View');
else if (indx==5)
b1= input("Enter Initial Thickness of the Fin: ");
b2=input('Final Thickness of the Fin: ');
w= input("Enter Width of the Fin: ");
Ab=w*b;
theta=atan((b1-(b2/2))/L);
hyp=L/cos(theta);
Afin=2*(w*hyp)+(b*b2*L);
x=(deltaX/2):deltaX:L;
y=((-(b1-b2)/2)/L).*x+b1/2;
p=2*((2*y)+w);
An=2.*y*w;
theta=atan((b1-b2)/2)/L*(180/pi);
xl=linspace(0,L);
yl=((-(b1-b2)/2)/L).*xl+b1/2;
if (((b1*h)/k<0.2))&&(((w*h)/k<0.2))
  disp('1-D Assumptions are Valid');
else
    disp('1-D Assumptions may be Invalid');
endif
plot(xl,yl,xl,-yl);
title('Fin Side View');
else if  (indx==6)
r=input('Input Initial Base Radius: ');
r2=input('Final Base Radius: ');
Ab=pi*r^2;
s=sqrt(L^2+(r+r2)^2);
Afin=pi*(r+r2)*s;
x=(deltaX/2):deltaX:L;
y=((-(r-r2)/2)/L).*x+r/2;
p=pi.*y.*2;
An=pi.*y.^2;
theta=atan((r(1)/2)/L)*(180/pi);
xl=linspace(0,L);
yl=((-(r-r2)/2)/L).*xl+r/2;
if ((r*h)/k<0.2)
  disp('1-D Assumptions are Valid');
else
    disp('1-D Assumptions may be Invalid');
endif
plot(xl,yl,xl,-yl);
title('Fin Side View');
else
 y= input('Enter a function handle describing the side view of the fin: ');
 w= input("Enter Width of the Fin: ");
x=(deltaX/2):deltaX:L;
y=y(x);
p=2*((2*y)+w);
An=2.*y*w;
plot(x,y,x,-y);
if (((y(1))/k<0.2))&&(((w*h)/k)<0.2)
  disp('1-D Assumptions are Valid');
else
    disp('1-D Assumptions may be Invalid');
endif
endif
endif
endif
endif
endif
endif

Carr=zeros(N-1,N-1);
Barr=ones(N-1,1);


for i=1:N-2
  xx(i)=((k*An(i)+k*An(i+1))/deltaX^2)+h*p(i);
  yy(i)=(k*An(i+1))/deltaX^2;
  zz(i)=(k*An(i))/deltaX^2;
end
for i=1:N-2
  Carr(i,i)=-xx(i);
end
for i=2:N-1
  Carr(i-1,i)=yy(i-1);
end
for i=2:N-1
  Carr(i,i-1)=yy(i-1);
end
Carr(N-2,N-1)=yy(N-2);
Carr(N-1,N-2)=yy(N-2);
Carr(N-1,N-1)=(-An(N-1)*k)/deltaX^2-h*p(N-1);

hpTinf= -h.*p*Tinf;
Barr=hpTinf'.*Barr;
Barr(1,:)=-Tb*zz(1)-hpTinf(1);


T=inv(Carr)*Barr
for i=1:N-1
  baseTarr(i)=T(1);
end

U= input('Enter the voltage of the component: ');
I= input('Enter the current through the component: ');
length= input('Enter length of the heat sink: ');
width= input(' Enter width of the heat sink: ');

Atotal= length*width;
Qtotal= U*I;
Q=h.*sum(An).*(sum(T)-Tinf);
Qmax=h.*sum(An).*(sum(baseTarr)-Tinf);
efficiency=Q/Qmax
number_of_fins= (Qtotal-h*Atotal*(Tb-Tinf))/(efficiency*h*Afin*(Tb-Tinf)-h*Ab*(Tb-Tinf));
number_of_fins= round(number_of_fins)
Qnofin=h*Atotal*(Tb-Tinf);
effectivness=(number_of_fins*Q)/Qnofin

nn=1:1:N-1;
figure
plot(nn,T);
title('Spatial Distribution of Temperature Across Nodes');



